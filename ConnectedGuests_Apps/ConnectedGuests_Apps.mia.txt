[DEFINE REGION: Check Application Requirements]
Comment: Set the compiler product type
Set Variable PRODUCTBRAND to 
[compiler if Variable PRODUCTBRAND Equals CG]
Set Variable TITLE to Connected Guests Apps
Set Variable COMPANY to Connected Guests
Set Variable PRODUCTBRAND to CG
[compiler end]
[compiler if Variable PRODUCTBRAND Equals MITEL]
Set Variable TITLE to Mitel Connected Guests Apps
Set Variable COMPANY to Mitel Connected Guests
Set Variable PRODUCTBRAND to MITEL
[compiler end]
 
Comment: Remove InstallAware Branding
Set Variable MYAHLOGO to TRUE
 
Comment: Set the Installer to Native mode rather than using Windows Installer
Set Variable NATIVE_ENGINE to TRUE
Set Variable NATIVE_OVERWRITE_OLDER to FALSE
Set Variable NATIVE_OVERWRITE to ALWAYS
 
Comment: Convert the CMDLINE to upper case for all potential comparisons
Convert Variable CMDLINE to UPPER case
 
Comment: Set default installer Variables
Set Variable SKIPSYSTEMCHECKS to FALSE
Set Variable DEBUGMODE to FALSE
Set Variable SKIPDISM to FALSE
Set Variable FORCEALLOPTIONS to FALSE
Set Variable INITERROR to FALSE
Set Variable INITERRORTEXT to 
Set Variable ALREADYINSTALLED to FALSE
Set Variable ALREADYINSTALLEDVERSION to 0.0.0.0
Set Variable TESTMARIADB to FALSE
Set Variable MYSQLUPGRADEREQUIRED to FALSE
Set Variable MYSQLPATCHREQUIRED to FALSE
Set Variable FILEUPGRADEREQUIRED to 
Set Variable UPGRADEPRODUCT to FALSE
Set Variable MARIADBTHISSERVER to 
Set Variable MARIASERVER to 
Set Variable DELETERESULT to 
Set Variable BACKUP2 to 
Set Variable KERNEL to 
Set Variable PLUGINRESULT to 
 
Comment: Set the core product variables
Set Variable INSTALLICHARGE to FALSE
Set Variable INSTALLHOTELMGR to FALSE
 
Comment: Set product specific variables
Set Variable TIGERPRO to FALSE
Set Variable TIGERCUB to FALSE
Set Variable TIGERILINK to FALSE
Set Variable TIGERCA to FALSE
Set Variable TIGERSMB to FALSE
 
Comment: Obtain the MAC Address for this installation
Run Program CMD.exe /C IPCONFIG /ALL | FIND "Physical Address" > C:\TTInstall_MACAddress.txt, startup in folder C:\ (WAIT)
Read from Text File C:\TTInstall_MACAddress.txt into Variable MACADDRESS
Replace    Physical Address. . . . . . . . . :  with  in variable MACADDRESS
Comment: If the MAC is default then clear it
if Variable MACADDRESS Contains 00-00-00-00-00-00
  Set Variable MACADDRESS to 
end
Call DLL Function kernel32.dll->DeleteFileA (get result into variable PLUGINRESULT)
 
Comment: Set any parameters passed through the Command Line
if Variable CMDLINE Contains DEBUG
  Set Variable DEBUGMODE to TRUE
end
if Variable CMDLINE Contains SKIPSYSTEMCHECKS
  Set Variable SKIPSYSTEMCHECKS to TRUE
end
if Variable CMDLINE Contains SKIPDISM
  Set Variable SKIPDISM to TRUE
end
if Variable CMDLINE Contains FORCEALLOPTIONS
  Set Variable FORCEALLOPTIONS to TRUE
end
 
Comment: Get the Kernel Version
Check Registry Key HKLM\SOFTWARE\Microsoft\Windows NT\CurrentVersion\CurrentMajorVersionNumber into WINVERMAJ
Check Registry Key HKLM\SOFTWARE\Microsoft\Windows NT\CurrentVersion\CurrentMinorVersionNumber into WINVERMIN
if Variable WINVERMAJ Equals NO$VALUE
  Comment: If it's not Windows 10 or above use the old key
  Read Registry Key HKLM\SOFTWARE\Microsoft\Windows NT\CurrentVersion\CurrentVersion into KERNEL
else
  Set Variable KERNEL to $WINVERMAJ$.$WINVERMIN$
end
 
Comment: Get the OS Type (Client/Server)
Check Registry Key HKLM\SOFTWARE\Microsoft\Windows NT\CurrentVersion\InstallationType into OSTYPE
if Variable OSTYPE Equals NO$VALUE
  Set Variable OSTYPE to Client
end
Convert Variable OSTYPE to UPPER case
 
Comment: Get the Exact OS Name
Check Registry Key HKLM\SOFTWARE\Microsoft\Windows NT\CurrentVersion\ProductName into OSNAME
 
Comment: Detect x64 or x86
Get System Setting Windows in 64 bit Mode into OS64
 
Comment: Display debug message if debug is on
if Variable DEBUGMODE Equals TRUE
  MessageBox: Debug, Operating System: [$OSNAME$]$NEWLINE$Operating System Type: [$OSTYPE$]$NEWLINE$Kernel: [$KERNEL$]$NEWLINE$x64: [$OS64$]$NEWLINE$$NEWLINE$Product Brand: [$PRODUCTBRAND$]
end
 
Comment: Begin system checks unless we are meant to skip
if Variable SKIPSYSTEMCHECKS not Equals TRUE
  Comment: Check the OS is atleast 7/2008
  if Variable KERNEL not Greater Than (Version) 6.0
    MessageBox: $TITLE$ Setup Error, This product requires the below Operating System or newer:$NEWLINE$$NEWLINE$Client OS: Windows 7$NEWLINE$Server OS: Windows Server 2008 R2$NEWLINE$$NEWLINE$Setup cannot continue.
    Terminate Installation
  end
   
  Comment: Check we have Administrator rights
  Get System Setting Administrator Rights into CHECKSYSTEM
  if Variable CHECKSYSTEM not Equals TRUE
    Set Variable INITERROR to TRUE
    Set Variable INITERRORTEXT to $INITERRORTEXT$Administrator Privileges$NEWLINE$
  end
   
  Comment: Check that the installer privilages are elevated
  Get System Setting Vista UAC Elevation into CHECKSYSTEM
  if Variable CHECKSYSTEM not Equals TRUE
    Set Variable INITERROR to TRUE
    Set Variable INITERRORTEXT to $INITERRORTEXT$Run as Administrator$NEWLINE$
  end
   
  Comment: Check that .NET 4.5.2 is installed
  if Variable OS64 Equals TRUE
    Set Itanium ia64 - Native 64 bit Windows, Intel Itanium Architecture - installation mode
  end
  Check Registry Key HKLM\SOFTWARE\Microsoft\NET Framework Setup\NDP\v4\Full\Release into CHECKSYSTEM
  if Variable OS64 Equals TRUE
    Set Win32 - Native 32 bit Windows and Windows 32 on Windows 64 (WOW64) - installation mode
  end
  if Variable CHECKSYSTEM Contains NO$
    Set Variable CHECKSYSTEM to 0
  end
  if Variable CHECKSYSTEM not Greater Than 379892
    Set Variable INITERROR to TRUE
    Set Variable INITERRORTEXT to $INITERRORTEXT$Microsoft .NET 4.5.2$NEWLINE$
  end
end
 
Comment: Terminate the installation if any of the pre-requisits are not installed
if Variable INITERROR Equals TRUE
  MessageBox: $TITLE$ Setup Error, Setup cannot run without the following being installed:$NEWLINE$$NEWLINE$$INITERRORTEXT$$NEWLINE$Please install the required feature(s) above before installing $TITLE$.
  Terminate Installation
end
 
Comment: Generate the current date in YYYYMMDD format
Set Variable DATE_FORMAT to ~~ 
Set Variable DATE_SEPERATOR to 
Read Registry Key HKCU\Control Panel\\International\iDate into DATE_FORMAT
Read Registry Key HKCU\Control Panel\\International\sDate into DATE_SEPERATOR
Set Variable TEMP_DATE to 
Set Variable DAY to 
Set Variable MONTH to 
Set Variable YEAR to 
if Variable DATE_FORMAT Equals 0
  Parse String $DATE$ into Variables MONTH and TEMP_DATE (Split at first occurrence of pattern)
  Parse String $TEMP_DATE$ into Variables DAY and TEMP_DATE (Split at first occurrence of pattern)
  Parse String $TEMP_DATE$ into Variables YEAR and TEMP_DATE (Split at first occurrence of pattern)
end
if Variable DATE_FORMAT Equals 1
  Parse String $DATE$ into Variables DAY and TEMP_DATE (Split at first occurrence of pattern)
  Parse String $TEMP_DATE$ into Variables MONTH and TEMP_DATE (Split at first occurrence of pattern)
  Parse String $TEMP_DATE$ into Variables YEAR and TEMP_DATE (Split at first occurrence of pattern)
end
if Variable DATE_FORMAT Equals 2
  Parse String $DATE$ into Variables YEAR and TEMP_DATE (Split at first occurrence of pattern)
  Parse String $TEMP_DATE$ into Variables MONTH and TEMP_DATE (Split at first occurrence of pattern)
  Parse String $TEMP_DATE$ into Variables DAY and TEMP_DATE (Split at first occurrence of pattern)
end
Set Variable CURRENTDATE to $YEAR$$MONTH$$DAY$
[END REGION]
 
[DEFINE REGION: Check/Install Application Pre-Requisites]
 
[DEFINE REGION: Check Application Pre-Requisites]
Comment: Check setup pre-requisites
Set Variable PREREQ to FALSE
Set Variable PRELIST to 
[compiler if Variable BUILDMODE not Equals PATCH]
if Variable NEEDSUPGRADE Equals TRUE
  Set Variable PREREQ to TRUE
  Set Variable PRELIST to $PRELIST$$NEWLINE$Previous Version Uninstallation
end
[compiler end]
[END REGION]
 
[DEFINE REGION: Install Application Pre-Requisites]
Comment: Install setup pre-requisites
if Variable PREREQ not Equals FALSE
  Comment: Display Dialog: prereq, wait for dialog to return (modal)
  if Variable WIZARD Equals CANCEL
    Terminate Installation
  end
  Comment: Display Dialog: progressprereq, use as progress dialog (non-modal)
  [compiler if Variable BUILDMODE not Equals PATCH]
  if Variable NEEDSUPGRADE Equals TRUE
    Set Variable REMOVEOLD to 
    Set Variable ERROROLD to 
    Install/Remove MSI Package $PRODUCTCODE$[REMOVE=ALL] (get result into variable REMOVEOLD)
    if Variable REMOVEOLD Equals ERROR
      MessageBox: $TITLE$ Setup, Unable to uninstall old version of $TITLE$. Please uninstall it yourself using Control Panel Add-Remove Programs before attempting to install this product.$NEWLINE$$NEWLINE$$ERROROLD$
      Terminate Installation
    end
    if Variable REMOVEOLD Equals REBOOT
      MessageBox: $TITLE$ Setup, Your computer needs to be restarted before $TITLE$ Setup can continue.$NEWLINE$$NEWLINE$Please save your work in all running programs and click OK to restart your computer. Setup will resume once your computer restarts.$NEWLINE$$NEWLINE$If you click CANCEL, setup will exit. You will have to run setup again at a later time to install $TITLE$.
      if Variable REBOOTNOW Equals OK
        Reboot Computer and Resume Setup
      else
        Terminate Installation
      end
    end
    Set Variable MAINTENANCE to FALSE
  end
  [compiler end]
  Hide Dialog
end
[END REGION]
 
[END REGION]
 
[DEFINE REGION: Define Setup Globals]
Comment: Define Setup Components
 
Comment: Initialize Setup Globals
Get System Setting Windows NT Kernel (NT4, 2000, XP, 2003, Vista, 2008, 7, 2008 R2, 8, Server 8) into ISNT
Get Folder Location System->Program Files Directory into PROGRAMFILES
Get Common Folder Location System->Program Files Directory into COMMONFILES
Get Common Folder Location Start Menu->Programs Group into SHORTCUTFILESALL
Get Common Folder Location Start Menu->Startup Group into STARTUPALL
Get Folder Location Start Menu->Programs Group into SHORTCUTFILES
if Variable SHORTCUTFILESALL Equals 
  Set Variable SHORTCUTFILESALL to $SHORTCUTFILES$
end
Set Variable SHORTCUTFOLDER to $SHORTCUTFILESALL$\$STARTMENU$
Get Common Folder Location System->Desktop Directory into DESKTOPDIR
Get Folder Location System->Windows Directory into WINDIR
Get Folder Location System->System Directory into WINSYSDIR
Get Common Folder Location System->Application Data Directory into APPDATA
Get Common Folder Location Special->Boot Path into OSDIR
if Variable OSDIR Equals 
  Set Variable OSDIR to C:\
end
Get Folder Location Taskbar->Quick Launch Directory into QUICKLAUNCHDIR
Get Common Folder Location WWW->WWWRoot into WWWROOTDIR
 
Comment: Get x64 Folder Locations
if Variable OS64 Equals TRUE
  Set Itanium ia64 - Native 64 bit Windows, Intel Itanium Architecture - installation mode
  Get Folder Location System->Program Files Directory into PROGRAMFILES64
  Get Common Folder Location System->System Directory into WINSYSDIR64
  Set Win32 - Native 32 bit Windows and Windows 32 on Windows 64 (WOW64) - installation mode
end
[END REGION]
 
[DEFINE REGION: Setup User Interview]
Set Variable TARGETDIR to C:\tig2020
Set Variable TARGETDRIVE to C:\
 
Check Registry Key HKLM\SOFTWARE\Tiger Communications\Tiger 2020\Local Config into CONFIGCHECK
if Variable CONFIGCHECK not Contains NO$
  Comment: It's already installed
  Set Variable ALREADYINSTALLED to TRUE
  Parse String $CONFIGCHECK$ into Variables TARGETDRIVE and DUMP (Split at first occurrence of pattern)
  Set Variable TARGETDIR to $TARGETDRIVE$tig2020
   
  Comment: Check the Installer Version.
  Comment: This registry string is only present in installations newer than 50.0.0.0
  Check Registry Key HKLM\SOFTWARE\Tiger Communications\Tiger 2020\InstallerVersion into REGCHECK
  if Variable REGCHECK Contains NO$
    Set Variable MYSQLUPGRADEREQUIRED to TRUE
    Set Variable ALREADYINSTALLEDVERSION to 4.0.0.0
  else
    Set Variable ALREADYINSTALLEDVERSION to $REGCHECK$
  end
end
 
Comment: Check if we need to install a MySQL Patch
if Variable ALREADYINSTALLEDVERSION not Greater Than (Version) 50.3.1.0
  if Variable ALREADYINSTALLEDVERSION Greater Than (Version) 4.999.999.999
    Set Variable MYSQLPATCHREQUIRED to TRUE
  end
end
 
if Variable MAINTENANCE Equals TRUE
  GoTo Label: Maintenance
else
  [compiler if Variable BUILDMODE not Equals PATCH]
  Comment: First Time Install
  Set Variable STARTMENU to $TITLE$
  Comment: Obtain the list of IIS websites into this variable here; this variable is later used by the wizard dialog to pre-populate the list of available IIS websites
  Get IIS Site List into variable SITELIST
  [compiler end]
end
 
label: Welcome Dialog
Display Dialog: welcome, wait for dialog to return (modal)
Comment: Check NEXT was pressed
if Variable WIZARD Equals CANCEL
  GoTo Label: Main Install
end
[compiler if Variable BUILDMODE not Equals PATCH]
label: Destination Directory
if Variable ALREADYINSTALLED not Equals TRUE
  Display Dialog: destination, wait for dialog to return (modal)
  Comment: Check NEXT was pressed
  if Variable WIZARD Equals BACK
    GoTo Label: Welcome Dialog
  else
    if Variable WIZARD Equals CANCEL
      GoTo Label: Main Install
    end
  end
  Set Variable TARGETDIR to $TARGETDRIVE$\tig2020
  Replace \\ with \ in variable TARGETDIR
else
  MessageBox: $TITLE$ Setup, A previous installation has been found and will be upgraded.$NEWLINE$$NEWLINE$Before the upgrade is completed, an Engineering Backup will be placed in the root of $OSDIR$.
end
Comment: Set the BACKUPDIR
Set Variable BACKUPDIR to $TARGETDRIVE$\Tiger_Backup
Replace \\ with \ in variable BACKUPDIR
Comment: Do not go to Core Product Selection if it's already been selected
if Variable INSTALLICHARGE not Equals FALSE
  GoTo Label: Custom Setup
end
if Variable INSTALLHOTELMGR not Equals FALSE
  GoTo Label: Custom Setup
end
label: Core Product Selection
if Variable FORCEALLOPTIONS Equals FALSE
  Comment: Display the Core Product options ONLY if it's a Server OS - else skip and only allow iCharge
  if Variable OSTYPE Contains SERVER
    Display Dialog: productselection, wait for dialog to return (modal)
  else
    Set Variable INSTALLICHARGE to TRUE
  end
else
  Comment: FORCEALLOPTIONS in CMD line - show the product selection anyway
  Display Dialog: productselection, wait for dialog to return (modal)
end
if Variable WIZARD Equals BACK
  GoTo Label: Destination Directory
end
if Variable WIZARD Equals CANCEL
  GoTo Label: Main Install
end
if Variable INSTALLICHARGE Equals FALSE
  if Variable INSTALLHOTELMGR Equals FALSE
    MessageBox: $TITLE$ Setup, Please select at least one Core Product.
    GoTo Label: Core Product Selection
  end
end
Comment: Now we know the products, set the components
Define Component: Base
Comment: Define iCharge/iLink Components
Define Component: Base\iCharge/iLink
Define Component: Base\iCharge/iLink\MariaDB
Define Component: Base\iCharge/iLink\EvMux
Define Component: Base\iCharge/iLink\Web Front End
Define Component: Base\iCharge/iLink\iCharge Services
Define Component: Base\iCharge/iLink\iCharge Services\Call Package Broker
Define Component: Base\iCharge/iLink\iCharge Services\iPost
Define Component: Base\iCharge/iLink\Interface Connectors
if Variable PRODUCTBRAND not Equals MITEL
  Define Component: Base\iCharge/iLink\Interface Connectors\Avaya IP Office
  Define Component: Base\iCharge/iLink\Interface Connectors\Cisco CUCM
end
Define Component: Base\iCharge/iLink\Interface Connectors\Generic EXT
Define Component: Base\iCharge/iLink\Interface Connectors\Generic PMS
Define Component: Base\iCharge/iLink\Interface Connectors\MXP PMS
if Variable PRODUCTBRAND not Equals MITEL
  Define Component: Base\iCharge/iLink\Interface Connectors\NEC SV8300/SV8500
  Define Component: Base\iCharge/iLink\Interface Connectors\Panasonic KX-TDA/TDE
end
Define Component: Base\iCharge/iLink\Interface Connectors\PAR Springer-Miller
Comment: Define HotelMGR Components if it's a Server OS
if Variable OSTYPE Equals SERVER
end
if Variable INSTALLHOTELMGR Equals TRUE
  Define Component: Base\HotelMGR
end
label: Custom Setup
Comment: If only HotelMGR is selected, skip the Components Tree
if Variable INSTALLICHARGE Equals FALSE
  if Variable INSTALLHOTELMGR Equals TRUE
    GoTo Label: MariaDB Wizard
  end
end
Display Dialog: componentstree, wait for dialog to return (modal)
Comment: Check NEXT was pressed
if Variable WIZARD Equals BACK
  GoTo Label: Destination Directory
else
  if Variable WIZARD Equals CANCEL
    GoTo Label: Main Install
  end
end
Comment: Check at least either iCharge or HotelMGR is selected
Get Component Base\iCharge/iLink Selection State into Variable DIALOGTEST
Get Component Base\HotelMGR Selection State into Variable DIALOGTEST2
if Variable DIALOGTEST Equals FALSE
  if Variable DIALOGTEST2 Equals FALSE
    MessageBox: $TITLE$ Setup, No products are selected for installation.  You must choose at least one product before the installation can continue.
    GoTo Label: Custom Setup
  end
end
label: MariaDB Wizard
Comment: Only show this dialog if MariaDB is not selected
Get Component Base\iCharge/iLink\MariaDB Selection State into Variable DIALOGTEST
Get Component Base\HotelMGR Selection State into Variable DIALOGTEST2
if Variable DIALOGTEST Equals FALSE
  Set Variable TESTMARIADB to TRUE
  Display Dialog: mariadb, wait for dialog to return (modal)
  if Variable MARIADBTHISSERVER Equals TRUE
    Set Variable MARIASERVER to 
    Select Component: Base\iCharge/iLink\MariaDB
    GoTo Label: CubPro Wizard
  end
  Comment: Check NEXT was pressed
  if Variable WIZARD Equals BACK
    GoTo Label: Custom Setup
  else
    if Variable WIZARD Equals CANCEL
      GoTo Label: Main Install
    end
  end
  Comment: Check an IP or Hostname exists
  if Variable MARIASERVER Equals 
    MessageBox: $TITLE$ Setup, Please enter a valid IP Address or Hostname for the MariaDB or MySQL Server.
    GoTo Label: MariaDB Wizard
  end
end
Set Variable TESTMARIADB to FALSE
label: CubPro Wizard
Set Variable CUBPRO to 
Set Variable TIGERPRO to FALSE
Set Variable TIGERCUB to FALSE
Set Variable TIGERILINK to FALSE
Set Variable TIGERCA to FALSE
Set Variable TIGERSMB to FALSE
Comment: If iCharge or iLink isn't selected - default to iLink for HotelMGR
if Variable INSTALLICHARGE Equals FALSE
  Set Variable TIGERILINK to TRUE
  Write Registry Key HKLM\SOFTWARE\Tiger Communications\Tiger 2020\Features\Product, iLink
  GoTo Label: TigBackup Wizard
end
Display Dialog: cubpro, wait for dialog to return (modal)
if Variable WIZARD Equals BACK
  GoTo Label: Custom Setup
else
  if Variable WIZARD Equals CANCEL
    GoTo Label: Main Install
  end
end
if Variable TIGERPRO Equals FALSE
  if Variable TIGERCUB Equals FALSE
    if Variable TIGERILINK Equals FALSE
      if Variable TIGERCA Equals FALSE
        if Variable TIGERSMB Equals FALSE
          Comment: No selection was made
          MessageBox: $TITLE$ Setup, Please select one of: $NEWLINE$$NEWLINE$iCharge Pro$NEWLINE$iCharge Cub$NEWLINE$iLink$NEWLINE$Call Accounting Only$NEWLINE$SMB
          GoTo Label: CubPro Wizard
        end
      end
    end
  end
end
if Variable TIGERPRO Equals TRUE
  Write Registry Key HKLM\SOFTWARE\Tiger Communications\Tiger 2020\Features\Product, Pro
end
if Variable TIGERCUB Equals TRUE
  Write Registry Key HKLM\SOFTWARE\Tiger Communications\Tiger 2020\Features\Product, Cub
end
if Variable TIGERILINK Equals TRUE
  Write Registry Key HKLM\SOFTWARE\Tiger Communications\Tiger 2020\Features\Product, iLink
end
if Variable TIGERSMB Equals TRUE
  Write Registry Key HKLM\SOFTWARE\Tiger Communications\Tiger 2020\Features\Product, SMB
  Set Variable TIGERPRO to TRUE
end
label: TigBackup Wizard
Set Variable BACKUP2 to FALSE
Set Variable BACKUPDRIVE2 to C:\
Comment: Only show the Dialog if Maria is installed and it is not an upgrade
Get Component Base\iCharge/iLink\MariaDB Selection State into Variable DIALOGTEST
if Variable DIALOGTEST Equals TRUE
  if Variable ALREADYINSTALLED Equals FALSE
    Display Dialog: tigbackup, wait for dialog to return (modal)
    Comment: Check if BACK or CANCEL were pressed instead of NEXT
    if Variable WIZARD Equals BACK
      GoTo Label: Custom Setup
    else
      if Variable WIZARD Equals CANCEL
        GoTo Label: Main Install
      end
    end
    Comment: NEXT was pressed, check if BACKUP2 is TRUE
    if Variable BACKUP2 Equals TRUE
      if Variable TARGETDRIVE Equals $BACKUPDRIVE2$
        MessageBox: $TITLE$ Setup, Backups are already configured for the $BACKUPDRIVE2$ drive.$NEWLINE$$NEWLINE$Please select another drive.
        GoTo Label: TigBackup Wizard
      end
      Comment: Check that there is enough space on the selected drive
      Get Free Space on $BACKUPDRIVE2$ into variable PLUGINRESULT
      PLUGINRESULT = $PLUGINRESULT$ / 1048576000
      if Variable PLUGINRESULT not Greater Than 2
        MessageBox: $TITLE$ Setup, There is not enough space on the $BACKUPDRIVE2$ drive to handle automatic backups.$NEWLINE$$NEWLINE$Please select another drive.
        GoTo Label: TigBackup Wizard
      end
      Comment: The drive selected is valid
      Set Variable BACKUPDIR2 to $BACKUPDRIVE2$\Tiger_Backup
      Replace \\ with \ in variable BACKUPDIR2
    end
  end
end
[compiler end]
label: Start Installation
Display Dialog: startinstallation, wait for dialog to return (modal)
if Variable WIZARD Equals BACK
  [compiler if Variable BUILDMODE not Equals PATCH]
  Get Component Base\iCharge/iLink\MariaDB Selection State into Variable DIALOGTEST
  if Variable DIALOGTEST Equals TRUE
    if Variable ALREADYINSTALLED Equals FALSE
      GoTo Label: TigBackup Wizard
    end
  end
  GoTo Label: Custom Setup
  [compiler else]
  GoTo Label: Welcome Dialog
  [compiler end]
else
  GoTo Label: Main Install
end
 
label: Maintenance
Comment: Maintenance Install/Uninstall
Comment: Read which features are already installed
Check Registry Key HKLM\SOFTWARE\Tiger Communications\Tiger 2020\Features\Base into INSTALLED_BASE
Check Registry Key HKLM\SOFTWARE\Tiger Communications\Tiger 2020\Features\MariaDB into INSTALLED_MARIADB
Check Registry Key HKLM\SOFTWARE\Tiger Communications\Tiger 2020\Features\Silverlight into INSTALLED_SILVERLIGHT
Check Registry Key HKLM\SOFTWARE\Tiger Communications\Tiger 2020\Features\EvMux into INSTALLED_EVMUX
Check Registry Key HKLM\SOFTWARE\Tiger Communications\Tiger 2020\Features\CallPkgBroker into INSTALLED_CALLPKGBROKER
Check Registry Key HKLM\SOFTWARE\Tiger Communications\Tiger 2020\Features\iPost into INSTALLED_IPOST
Check Registry Key HKLM\SOFTWARE\Tiger Communications\Tiger 2020\Features\AvayaIPOffice into INSTALLED_AVAYAIPOFFICE
Check Registry Key HKLM\SOFTWARE\Tiger Communications\Tiger 2020\Features\Cisco into INSTALLED_CISCO
Check Registry Key HKLM\SOFTWARE\Tiger Communications\Tiger 2020\Features\GenericExt into INSTALLED_GENERICEXT
Check Registry Key HKLM\SOFTWARE\Tiger Communications\Tiger 2020\Features\GenericPMS into INSTALLED_GENERICPMS
Check Registry Key HKLM\SOFTWARE\Tiger Communications\Tiger 2020\Features\MXPPMS into INSTALLED_MXPPMS
Check Registry Key HKLM\SOFTWARE\Tiger Communications\Tiger 2020\Features\NECUniverge into INSTALLED_NECUniverge
Check Registry Key HKLM\SOFTWARE\Tiger Communications\Tiger 2020\Features\Panasonic into INSTALLED_PANASONIC
Check Registry Key HKLM\SOFTWARE\Tiger Communications\Tiger 2020\Features\SpringerMiller into INSTALLED_SPRINGERMILLER
Check Registry Key HKLM\SOFTWARE\Tiger Communications\Tiger 2020\Features\HotelMGR into INSTALLED_HOTELMGR
 
Comment: Check if we need to upgrade
Check Registry Key HKLM\SOFTWARE\Tiger Communications\Tiger 2020\InstallerVersion into REGCHECK
if Variable REGCHECK not Contains NO$
  if Variable VERSION Greater Than (Version) $REGCHECK$
    Set Variable FILEUPGRADEREQUIRED to TRUE
  end
end
 
label: Maintenance Dialog
Display Dialog: maintenance, wait for dialog to return (modal)
Comment: If this is an upgrade...
if Variable FILEUPGRADEREQUIRED Equals TRUE
  Comment: Check one of the options was selected
  if Variable UPGRADEPRODUCT not Equals TRUE
    if Variable REMOVE not Equals TRUE
      MessageBox: $TITLE$ Setup, Please select one of the options.
      GoTo Label: Maintenance Dialog
    end
  end
  if Variable UPGRADEPRODUCT Equals TRUE
    Set Variable MAINTENANCE to FALSE
    MessageBox: $TITLE$ Setup, Please close any open Connected Guests applications before continuing. All services will automatically be stopped.
    GoTo Label: Custom Setup
  end
end
Comment: Check if BACK or CANCEL were pressed instead of NEXT
if Variable WIZARD Equals BACK
  GoTo Label: Maintenance Dialog
else
  if Variable WIZARD Equals CANCEL
    GoTo Label: Main Install
  end
end
label: Maintenance Component
Display Dialog: componentstree (if variable MODIFY is TRUE), wait for dialog to return (modal)
Comment: Check if BACK or CANCEL were pressed instead of NEXT
if Variable WIZARD Equals BACK
  GoTo Label: Maintenance Dialog
else
  if Variable WIZARD Equals CANCEL
    GoTo Label: Main Install
  end
end
label: Maintenance Start Installation
Display Dialog: startinstallation, wait for dialog to return (modal)
Comment: Check if BACK or CANCEL were pressed instead of NEXT
if Variable WIZARD Equals BACK
  GoTo Label: Maintenance Component
else
  if Variable WIZARD Equals CANCEL
    GoTo Label: Main Install
  end
end
[END REGION]
 
[DEFINE REGION: Process (Un)Installation]
label: Main Install
Comment: Exit Setup if Wizard Loop cancelled
if Variable WIZARD Equals CANCEL
  Terminate Installation
end
 
Comment: Prepare to install
Set Variable PROGRESSTEXT to Preparing $TITLE$...
Set Variable SUCCESS to 
Set Variable LASTERROR to 
Display Dialog: progress, use as progress dialog (non-modal)
 
Comment: Modify Target System
[DEFINE REGION: Perform Uninstallation]
if Variable REMOVE Equals TRUE
   
  Comment: Remove Web Sites
  Include Script: Web_Uninstall
  Include Script: IPOffice_Uninstall
  Include Script: Cisco_Uninstall
  Include Script: GenericExt_Uninstall
  Include Script: GenericPMS_Uninstall
  Include Script: MXPPMS_Uninstall
  Include Script: SpringerMiller_Uninstall
   
  Comment: Remove Services
  Include Script: CallPkgBroker_Uninstall
  Include Script: EvMux_Uninstall
  Include Script: Cisco_Uninstall
  Include Script: NECUniverge_Uninstall
   
  Comment: Remove Files
  Include Script: Panasonic_Uninstall
   
  Comment: After everything else, remove Maria
  Include Script: Base_Uninstall
  Include Script: MariaDB_Uninstall
   
  Comment: Apply the Uninstall to remove everything in the MSI Database
  Apply Uninstall (get result into variable SUCCESS)
   
  Comment: Delete folders and directories
  Recursively Delete Files $TARGETDIR$\*
  Call DLL Function kernel32.dll->RemoveDirectoryA (get result into variable PLUGINRESULT)
   
  Set Variable PROGRESS to 100
else
  [END REGION]
  [DEFINE REGION: Perform First Time or Maintenance Installation]
  [OFFLINE CONTENT]
  Comment: We should kill services.msc in case we need to delete/add services
  Run Program $WINSYSDIR$\taskkill.exe /IM mmc.exe /F (WAIT)
   
  if Variable SKIPDISM not Equals TRUE
    if Variable KERNEL Greater Than (Version) 6.0
      if Variable OSTYPE not Equals EMBEDDED
        Comment: Install IIS and .NET Features
        Include Script: DISM
      end
    end
  end
   
  Comment: If Tiger is already installed, we need to ensure all services are stopped
  if Variable ALREADYINSTALLED Equals TRUE
    Run Program $WINSYSDIR$\net.exe STOP "TigEvMux" (WAIT)
    Run Program $WINSYSDIR$\net.exe STOP "AvayaIPOfficeClientService" (WAIT)
    Run Program $WINSYSDIR$\net.exe STOP "SpringerMillerClientService" (WAIT)
    Run Program $WINSYSDIR$\net.exe STOP "Tiger_Session_Manager" (WAIT)
    Run Program $WINSYSDIR$\net.exe STOP "TigInterfaceMonitor" (WAIT)
    Run Program $WINSYSDIR$\net.exe STOP "TigCallPkgBroker" (WAIT)
    Run Program $WINSYSDIR$\net.exe STOP "TigerTMSCMClientService" (WAIT)
    Run Program $WINSYSDIR$\net.exe STOP "DC_Call_Manager" (WAIT)
    Run Program $WINSYSDIR$\net.exe STOP "NotificationEscalationService" (WAIT)
    Run Program $WINSYSDIR$\net.exe STOP "TigStatMan" (WAIT)
    Run Program $WINSYSDIR$\net.exe STOP "TigerGenericPMSService" (WAIT)
    Run Program $WINSYSDIR$\net.exe STOP "TigerGenericMXPPMSService" (WAIT)
    Run Program $WINSYSDIR$\net.exe STOP "TigerGenericEXTService" (WAIT)
     
    Run Program $WINSYSDIR$\net.exe START "MySQL" (WAIT)
    Set Variable PROGRESSTEXT to Creating an Engineering Backup to $OSDIR$...
    Run Program $TARGETDIR$\Utility\tigbackup.exe -ef$TARGETDIR$ -et$OSDIR$ (WAIT)
    Run Program $WINSYSDIR$\net.exe STOP "MySQL" (WAIT)
     
     
    Run Program $WINSYSDIR$\sc.exe DELETE "Tiger_Session_Manager" (WAIT)
     
    if Variable MYSQLUPGRADEREQUIRED Equals TRUE
      Comment: We need to uninstall MySQL for MariaDB
      Run Program $WINSYSDIR$\sc.exe DELETE "MySQL" (WAIT)
    end
  end
   
  label: Files Base
  if Variable DEBUGMODE Equals TRUE
    MessageBox: $TITLE$ Debug, Test Base Files
  end
   
  [DEFINE WEB MEDIA iChargeiLink]
  Get Component Base\iCharge/iLink Selection State into Variable SELECTED
  if Variable SELECTED Equals TRUE
    if Variable MAINTENANCE not Equals TRUE
      Write Registry Key HKLM\SOFTWARE\Tiger Communications\Tiger 2020\Features\Base, 1
      Include Script: Base_Environment
      Include Script: Base_Files
    end
  else
    Write Registry Key HKLM\SOFTWARE\Tiger Communications\Tiger 2020\Features\Base, 0
  end
   
  label: Files MariaDB
  if Variable DEBUGMODE Equals TRUE
    MessageBox: $TITLE$ Debug, Test MariaDB Files
  end
   
  [DEFINE WEB MEDIA MariaDB]
  Get Component Base\iCharge/iLink\MariaDB Selection State into Variable SELECTED
  if Variable SELECTED Equals TRUE
    if Variable ALREADYINSTALLED Equals TRUE
      if Variable MYSQLUPGRADEREQUIRED Equals TRUE
        Include Script: MariaDB_Files
      end
    else
      if Variable MAINTENANCE Equals TRUE
        if Variable INSTALLED_MARIADB Equals 1
          Comment: Skip if the files are already installed
          GoTo Label: Files Silverlight
        end
      end
      Include Script: MariaDB_Files
    end
    Write Registry Key HKLM\SOFTWARE\Tiger Communications\Tiger 2020\Features\MariaDB, 1
  else
    Write Registry Key HKLM\SOFTWARE\Tiger Communications\Tiger 2020\Features\MariaDB, 0
  end
   
  label: Files Silverlight
  if Variable DEBUGMODE Equals TRUE
    MessageBox: $TITLE$ Debug, Test Web Files
  end
   
  [DEFINE WEB MEDIA Web Front End]
  Get Component Base\iCharge/iLink\Web Front End Selection State into Variable SELECTED
  if Variable SELECTED Equals TRUE
    if Variable MAINTENANCE Equals TRUE
      if Variable INSTALLED_SILVERLIGHT Equals 1
        Comment: Skip if the files are already installed
        GoTo Label: Files EvMux
      end
    end
    Write Registry Key HKLM\SOFTWARE\Tiger Communications\Tiger 2020\Features\Silverlight, 1
    Include Script: Web_Files
  else
    Write Registry Key HKLM\SOFTWARE\Tiger Communications\Tiger 2020\Features\Silverlight, 0
  end
   
  label: Files EvMux
  if Variable DEBUGMODE Equals TRUE
    MessageBox: $TITLE$ Debug, Test EvMux Files
  end
   
  [DEFINE WEB MEDIA EvMux]
  Get Component Base\iCharge/iLink\EvMux Selection State into Variable SELECTED
  if Variable SELECTED Equals TRUE
    Write Registry Key HKLM\SOFTWARE\Tiger Communications\Tiger 2020\Features\EvMux, 1
  else
    Write Registry Key HKLM\SOFTWARE\Tiger Communications\Tiger 2020\Features\EvMux, 0
  end
   
  label: Files CallPkgBroker
  if Variable DEBUGMODE Equals TRUE
    MessageBox: $TITLE$ Debug, Test CallPkg Files
  end
   
  [DEFINE WEB MEDIA Call Package Broker]
  Get Component Base\iCharge/iLink\iCharge Services\Call Package Broker Selection State into Variable SELECTED
  if Variable SELECTED Equals TRUE
    if Variable MAINTENANCE Equals TRUE
      if Variable INSTALLED_CALLPKGBROKER Equals 1
        Comment: Skip if the files are already installed
        GoTo Label: Files iPost
      end
    end
    Write Registry Key HKLM\SOFTWARE\Tiger Communications\Tiger 2020\Features\CallPkgBroker, 1
    Include Script: CallPkgBroker_Files
  else
    Write Registry Key HKLM\SOFTWARE\Tiger Communications\Tiger 2020\Features\CallPkgBroker, 0
  end
   
  label: Files iPost
  if Variable DEBUGMODE Equals TRUE
    MessageBox: $TITLE$ Debug, Start iPost Files
  end
   
  [DEFINE WEB MEDIA iPost]
  Get Component Base\iCharge/iLink\iCharge Services\iPost Selection State into Variable SELECTED
  if Variable SELECTED Equals TRUE
    if Variable MAINTENANCE Equals TRUE
      if Variable INSTALLED_IPOST Equals TRUE
        Comment: Skip if the files are already installed
        GoTo Label: Files AvayaIPOffice
      end
    end
    Write Registry Key HKLM\SOFTWARE\Tiger Communications\Tiger 2020\Features\iPost, 1
    Include Script: iPost_Files
  else
    Write Registry Key HKLM\SOFTWARE\Tiger Communications\Tiger 2020\Features\iPost, 0
  end
   
  label: Files AvayaIPOffice
  if Variable DEBUGMODE Equals TRUE
    MessageBox: $TITLE$ Debug, Test IPO Files
  end
   
  [DEFINE WEB MEDIA Avaya IP Office]
  Get Component Base\iCharge/iLink\Interface Connectors\Avaya IP Office Selection State into Variable SELECTED
  if Variable SELECTED Equals TRUE
    if Variable MAINTENANCE Equals TRUE
      if Variable INSTALLED_AVAYAIPOFFICE Equals 1
        Comment: Skip if the files are already installed
        GoTo Label: Files Cisco
      end
    end
    Write Registry Key HKLM\SOFTWARE\Tiger Communications\Tiger 2020\Features\AvayaIPOffice, 1
    Include Script: IPOffice_Files
  else
    Write Registry Key HKLM\SOFTWARE\Tiger Communications\Tiger 2020\Features\AvayaIPOffice, 0
  end
   
  label: Files Cisco
  if Variable DEBUGMODE Equals TRUE
    MessageBox: $TITLE$ Debug, Test Cisco Files
  end
   
  [DEFINE WEB MEDIA Cisco CUCM]
  Get Component Base\iCharge/iLink\Interface Connectors\Cisco CUCM Selection State into Variable SELECTED
  if Variable SELECTED Equals TRUE
    if Variable MAINTENANCE Equals TRUE
      if Variable INSTALLED_CISCO Equals 1
        Comment: Skip if the files are already installed
        GoTo Label: Files GenericExt
      end
    end
    Write Registry Key HKLM\SOFTWARE\Tiger Communications\Tiger 2020\Features\Cisco, 1
    Include Script: Cisco_Files
  else
    Write Registry Key HKLM\SOFTWARE\Tiger Communications\Tiger 2020\Features\Cisco, 0
  end
   
  label: Files GenericExt
  if Variable DEBUGMODE Equals TRUE
    MessageBox: $TITLE$ Debug, Test GenericExt Files
  end
   
  [DEFINE WEB MEDIA Generic EXT]
  Get Component Base\iCharge/iLink\Interface Connectors\Generic EXT Selection State into Variable SELECTED
  if Variable SELECTED Equals TRUE
    if Variable MAINTENANCE Equals TRUE
      if Variable INSTALLED_GENERICEXT Equals 1
        Comment: Skip if the files are already installed
        GoTo Label: Files GenericPMS
      end
    end
    Write Registry Key HKLM\SOFTWARE\Tiger Communications\Tiger 2020\Features\GenericExt, 1
    Include Script: GenericExt_Files
  else
    Write Registry Key HKLM\SOFTWARE\Tiger Communications\Tiger 2020\Features\GenericExt, 0
  end
   
  label: Files GenericPMS
  if Variable DEBUGMODE Equals TRUE
    MessageBox: $TITLE$ Debug, Test GenericPMS Files
  end
   
  [DEFINE WEB MEDIA Generic PMS]
  Get Component Base\iCharge/iLink\Interface Connectors\Generic PMS Selection State into Variable SELECTED
  if Variable SELECTED Equals TRUE
    if Variable MAINTENANCE Equals TRUE
      if Variable INSTALLED_GENERICPMS Equals 1
        Comment: Skip if the files are already installed
        GoTo Label: Files MXPPMS
      end
    end
    Write Registry Key HKLM\SOFTWARE\Tiger Communications\Tiger 2020\Features\GenericPMS, 1
    Include Script: GenericPMS_Files
  else
    Write Registry Key HKLM\SOFTWARE\Tiger Communications\Tiger 2020\Features\GenericPMS, 0
  end
   
  label: Files MXPPMS
  if Variable DEBUGMODE Equals TRUE
    MessageBox: $TITLE$ Debug, Test MXPPMS Files
  end
   
  [DEFINE WEB MEDIA MXP PMS]
  Get Component Base\iCharge/iLink\Interface Connectors\MXP PMS Selection State into Variable SELECTED
  if Variable SELECTED Equals TRUE
    if Variable MAINTENANCE Equals TRUE
      if Variable INSTALLED_MXPPMS Equals 1
        Comment: Skip if the files are already installed
        GoTo Label: Files NEC Univerge
      end
    end
    Write Registry Key HKLM\SOFTWARE\Tiger Communications\Tiger 2020\Features\MXPPMS, 1
    Include Script: MXPPMS_Files
  else
    Write Registry Key HKLM\SOFTWARE\Tiger Communications\Tiger 2020\Features\MXPPMS, 0
  end
   
  label: Files NEC Univerge
  if Variable DEBUGMODE Equals TRUE
    MessageBox: $TITLE$ Debug, Test NEC Files
  end
   
  [DEFINE WEB MEDIA NEC Univerge]
  Get Component Base\iCharge/iLink\Interface Connectors\NEC SV8300/SV8500 Selection State into Variable SELECTED
  if Variable SELECTED Equals TRUE
    if Variable MAINTENANCE Equals TRUE
      if Variable INSTALLED_NECUNIVERGE Equals 1
        Comment: Skip if the files are already installed
        GoTo Label: Files Panasonic
      end
    end
    Write Registry Key HKLM\SOFTWARE\Tiger Communications\Tiger 2020\Features\NECUniverge, 1
    Include Script: NECUniverge_Files
  else
    Write Registry Key HKLM\SOFTWARE\Tiger Communications\Tiger 2020\Features\NECUniverge, 0
  end
   
  label: Files Panasonic
  if Variable DEBUGMODE Equals TRUE
    MessageBox: $TITLE$ Debug, Test Panasonic Files
  end
   
  [DEFINE WEB MEDIA Panasonic KX]
  Get Component Base\iCharge/iLink\Interface Connectors\Panasonic KX-TDA/TDE Selection State into Variable SELECTED
  if Variable SELECTED Equals TRUE
    if Variable MAINTENANCE Equals TRUE
      if Variable INSTALLED_PANASONIC Equals 1
        Comment: Skip if the files are already installed
        GoTo Label: Files SpringerMiller
      end
    end
    Write Registry Key HKLM\SOFTWARE\Tiger Communications\Tiger 2020\Features\Panasonic, 1
    Include Script: Panasonic_Files
  else
    Write Registry Key HKLM\SOFTWARE\Tiger Communications\Tiger 2020\Features\Panasonic, 0
  end
   
  label: Files SpringerMiller
  if Variable DEBUGMODE Equals TRUE
    MessageBox: $TITLE$ Debug, Test SpringerMiller Files
  end
   
  [DEFINE WEB MEDIA Springer Miller Service]
  Get Component Base\iCharge/iLink\Interface Connectors\PAR Springer-Miller Selection State into Variable SELECTED
  if Variable SELECTED Equals TRUE
    if Variable MAINTENANCE Equals TRUE
      if Variable INSTALLED_SPRINGERMILLER Equals 1
        Comment: Skip if the files are already installed
        GoTo Label: Files HotelMGR
      end
    end
    Write Registry Key HKLM\SOFTWARE\Tiger Communications\Tiger 2020\Features\SpringerMiller, 1
    Include Script: SpringerMiller_Files
  else
    Write Registry Key HKLM\SOFTWARE\Tiger Communications\Tiger 2020\Features\SpringerMiller, 0
  end
   
  label: Files HotelMGR
  if Variable DEBUGMODE Equals TRUE
    MessageBox: $TITLE$ Debug, Test HotelMGR Files
  end
   
  [DEFINE WEB MEDIA HotelMGR]
  Get Component Base\HotelMGR Selection State into Variable SELECTED
  if Variable SELECTED Equals TRUE
    if Variable MAINTENANCE Equals TRUE
      if Variable INSTALLED_HOTELMGR Equals 1
        Comment: Skip if the files are already installed
        GoTo Label: Files End
      end
    end
    Write Registry Key HKLM\SOFTWARE\Tiger Communications\Tiger 2020\Features\HotelMGR, 1
    Include Script: HotelMGR_Files
  else
    Write Registry Key HKLM\SOFTWARE\Tiger Communications\Tiger 2020\Features\HotelMGR, 0
  end
   
  label: Files End
   
  Comment: All files have been placed - do a global Search/Replace on Web.config to remove default document files
  Run Program $TARGETDIR$\Temp\fnr.exe --cl --dir "$TARGETDIR$\Web" --fileMask "Web.config" --includeSubDirectories --find "<defaultDocument>" --replace "<!--<defaultDocument>" (WAIT)
  Run Program $TARGETDIR$\Temp\fnr.exe --cl --dir "$TARGETDIR$\Web" --fileMask "Web.config" --includeSubDirectories --find "</defaultDocument>" --replace "</defaultDocument>-->" (WAIT)
  Comment: Remove any duplicate comments left
  Run Program $TARGETDIR$\Temp\fnr.exe --cl --dir "$TARGETDIR$\Web" --fileMask "Web.config" --includeSubDirectories --find "<!--<!--" --replace "<!--" (WAIT)
  Run Program $TARGETDIR$\Temp\fnr.exe --cl --dir "$TARGETDIR$\Web" --fileMask "Web.config" --includeSubDirectories --find ">-->-->" --replace ">-->" (WAIT)
   
  if Variable DEBUGMODE Equals TRUE
    MessageBox: $TITLE$ Debug, Completed Testing Files Section
  end
  [compiler if Variable BUILDMODE Equals PATCH]
  Apply Patch (get result into variable SUCCESS)
  [compiler else]
  if Variable ADVERTISE Equals TRUE
    Apply Advertised (get result into variable SUCCESS)
  else
    Apply Install (get result into variable SUCCESS)
    if Variable SUCCESS not Equals ERROR
      if Variable SUCCESS not Equals CANCEL
         
        Set Variable PROGRESS to 0
         
        Comment: **** Begin install tasks ****
         
        label: Install MariaDB
        if Variable DEBUGMODE Equals TRUE
          MessageBox: $TITLE$ Debug, Test MariaDB Install
        end
         
        Get Component Base\iCharge/iLink\MariaDB Selection State into Variable SELECTED
        if Variable SELECTED Equals TRUE
          if Variable ALREADYINSTALLED Equals TRUE
            if Variable MYSQLUPGRADEREQUIRED Equals TRUE
              Set Variable PROGRESSTEXT to MariaDB: Installing
              Include Script: MariaDB_Install
              Set Variable PROGRESS to 100
            end
            if Variable MYSQLPATCHREQUIRED Equals TRUE
              Comment: A patch is required which means we need to reinstall the service
              Set Variable PROGRESSTEXT to MariaDB: Installing
              Include Script: MariaDB_Install
              Set Variable PROGRESS to 100
            end
            if Variable INSTALLED_MARIADB Equals 1
              Comment: Skip if already installed
              Run Program $WINSYSDIR$\net.exe START "MySQL" (WAIT)
              GoTo Label: Install Base
            end
          else
            Set Variable PROGRESSTEXT to MariaDB: Installing
            Include Script: MariaDB_Install
            Set Variable PROGRESS to 100
          end
        end
         
        label: Install Base
        if Variable DEBUGMODE Equals TRUE
          MessageBox: $TITLE$ Debug, Test Base Install
        end
         
        Get Component Base\iCharge/iLink Selection State into Variable SELECTED
        if Variable SELECTED Equals TRUE
          Set Variable PROGRESS to 0
          if Variable INSTALLED_BASE Equals 1
            Comment: Skip if already installed
            GoTo Label: Install Silverlight
          end
          Set Variable PROGRESSTEXT to iCharge: Installing
          Include Script: Base_Install_IIS
          Include Script: Base_Install
          Set Variable PROGRESS to 100
        end
         
        label: Install Silverlight
        if Variable DEBUGMODE Equals TRUE
          MessageBox: $TITLE$ Debug, Test Web Install
        end
         
        Get Component Base\iCharge/iLink\Web Front End Selection State into Variable SELECTED
        if Variable SELECTED Equals TRUE
          if Variable INSTALLED_SILVERLIGHT Equals 1
            Comment: Skip if already installed
            GoTo Label: Install EvMux
          end
          Set Variable PROGRESS to 0
          Set Variable PROGRESSTEXT to Web Front End: Installing
          Include Script: Web_Install
          Set Variable PROGRESS to 100
        else
          if Variable INSTALLED_SILVERLIGHT Equals 1
            Comment: The component is currently installed but no longer selected
            Include Script: Web_Uninstall
          end
        end
         
        label: Install EvMux
        if Variable DEBUGMODE Equals TRUE
          MessageBox: $TITLE$ Debug, Test EvMux Install
        end
         
        Get Component Base\iCharge/iLink\EvMux Selection State into Variable SELECTED
        if Variable SELECTED Equals TRUE
          if Variable INSTALLED_EVMUX Equals 1
            Comment: Skip if already installed
            GoTo Label: Install Call Package Broker
          end
          Set Variable PROGRESS to 0
          Set Variable PROGRESSTEXT to EvMux: Installing
          Include Script: EvMux_Install
          Set Variable PROGRESS to 100
        else
          if Variable INSTALLED_EVMUX Equals 1
            Comment: The component is currently installed but no longer selected
            Include Script: EvMux_Uninstall
          end
        end
         
        label: Install Call Package Broker
        if Variable DEBUGMODE Equals TRUE
          MessageBox: $TITLE$ Debug, Test CallPkg Install
        end
         
        Get Component Base\iCharge/iLink\iCharge Services\Call Package Broker Selection State into Variable SELECTED
        if Variable SELECTED Equals TRUE
          if Variable INSTALLED_CALLPKGBROKER Equals 1
            Comment: Skip if already installed
            GoTo Label: Install iPost
          end
          Set Variable PROGRESS to 0
          Set Variable PROGRESSTEXT to Call Package Broker: Installing
          Include Script: CallPkgBroker_Install
          Set Variable PROGRESS to 100
        else
          if Variable INSTALLED_CALLPKGBROKER Equals 1
            Comment: The component is currently installed but no longer selected
            Include Script: CallPkgBroker_Uninstall
          end
        end
         
        label: Install iPost
        if Variable DEBUGMODE Equals TRUE
          MessageBox: $TITLE$ Debug, Test iPost Install
        end
         
        Get Component Base\iCharge/iLink\iCharge Services\iPost Selection State into Variable SELECTED
        if Variable SELECTED Equals TRUE
          if Variable INSTALLED_IPOST Equals 1
            Comment: Skip if already installed
            GoTo Label: Install Avaya IP Office
          end
          Set Variable PROGRESS to 0
          Set Variable PROGRESSTEXT to iPost: Installing
          Include Script: iPost_Install
          Set Variable PROGRESS to 100
        else
          if Variable INSTALLED_IPOST Equals 1
            Comment: The component is currently installed but no longer selected
            Include Script: iPost_Uninstall
          end
        end
         
        label: Install Avaya IP Office
        if Variable DEBUGMODE Equals TRUE
          MessageBox: $TITLE$ Debug, Test IPO Install
        end
         
        Get Component Base\iCharge/iLink\Interface Connectors\Avaya IP Office Selection State into Variable SELECTED
        if Variable SELECTED Equals TRUE
          if Variable INSTALLED_AVAYAIPOFFICE Equals 1
            Comment: Skip if already installed
            GoTo Label: Install Cisco
          end
          Set Variable PROGRESS to 0
          Set Variable PROGRESSTEXT to Avaya IPOffice: Installing
          Include Script: IPOffice_Install
          Set Variable PROGRESS to 100
        else
          if Variable INSTALLED_AVAYAIPOFFICE Equals 1
            Comment: The component is currently installed but no longer selected
            Include Script: IPOffice_Uninstall
          end
        end
         
        label: Install Cisco
        if Variable DEBUGMODE Equals TRUE
          MessageBox: $TITLE$ Debug, Test Cisco Install
        end
         
        Get Component Base\iCharge/iLink\Interface Connectors\Cisco CUCM Selection State into Variable SELECTED
        if Variable SELECTED Equals TRUE
          if Variable INSTALLED_CISCO Equals 1
            Comment: Skip if already installed
            GoTo Label: Install GenericExt
          end
          Set Variable PROGRESS to 0
          Set Variable PROGRESSTEXT to Cisco Call Manager Service: Installing
          Include Script: Cisco_Install
          Set Variable PROGRESS to 100
        else
          if Variable INSTALLED_CISCO Equals 1
            Comment: The component is currently installed but no longer selected
            Include Script: Cisco_Uninstall
          end
        end
         
         
        label: Install GenericExt
        if Variable DEBUGMODE Equals TRUE
          MessageBox: $TITLE$ Debug, Test GenericExt Install
        end
         
        Get Component Base\iCharge/iLink\Interface Connectors\Generic EXT Selection State into Variable SELECTED
        if Variable SELECTED Equals TRUE
          if Variable INSTALLED_GENERICEXT Equals 1
            Comment: Skip if already installed
            GoTo Label: Install GenericPMS
          end
          Set Variable PROGRESS to 0
          Set Variable PROGRESSTEXT to Generic EXT: Installing
          Include Script: GenericExt_Install
          Set Variable PROGRESS to 100
        else
          if Variable INSTALLED_GENERICEXT Equals 1
            Comment: The component is currently installed but no longer selected
            Include Script: GenericExt_Uninstall
          end
        end
         
        label: Install GenericPMS
        if Variable DEBUGMODE Equals TRUE
          MessageBox: $TITLE$ Debug, Test GenericPMS Install
        end
         
        Get Component Base\iCharge/iLink\Interface Connectors\Generic PMS Selection State into Variable SELECTED
        if Variable SELECTED Equals TRUE
          if Variable INSTALLED_GENERICPMS Equals 1
            Comment: Skip if already installed
            GoTo Label: Install MXPPMS
          end
          Set Variable PROGRESS to 0
          Set Variable PROGRESSTEXT to Generic PMS: Installing
          Include Script: GenericPMS_Install
          Set Variable PROGRESS to 100
        else
          if Variable INSTALLED_GENERICPMS Equals 1
            Comment: The component is currently installed but no longer selected
            Include Script: GenericPMS_Uninstall
          end
        end
         
        label: Install MXPPMS
        if Variable DEBUGMODE Equals TRUE
          MessageBox: $TITLE$ Debug, Test MXPPMSInstall
        end
         
        Get Component Base\iCharge/iLink\Interface Connectors\MXP PMS Selection State into Variable SELECTED
        if Variable SELECTED Equals TRUE
          if Variable INSTALLED_MXPPMS Equals 1
            Comment: Skip if already installed
            GoTo Label: Install NEC Univerge
          end
          Set Variable PROGRESS to 0
          Set Variable PROGRESSTEXT to MXP PMS: Installing
          Include Script: MXPPMS_Install
          Set Variable PROGRESS to 100
        else
          if Variable INSTALLED_MXPPMS Equals 1
            Comment: The component is currently installed but no longer selected
            Include Script: MXPPMS_Uninstall
          end
        end
         
        label: Install NEC Univerge
        if Variable DEBUGMODE Equals TRUE
          MessageBox: $TITLE$ Debug, Test NEC Install
        end
         
        Get Component Base\iCharge/iLink\Interface Connectors\NEC SV8300/SV8500 Selection State into Variable SELECTED
        if Variable SELECTED Equals TRUE
          if Variable INSTALLED_NECUNIVERGE Equals 1
            Comment: Skip if already installed
            GoTo Label: Install Panasonic TAPI
          end
          Set Variable PROGRESS to 0
          Set Variable PROGRESSTEXT to NEC Univerge: Installing
          Include Script: NECUniverge_Install
          Set Variable PROGRESS to 100
        else
          if Variable INSTALLED_NECUNIVERGE Equals 1
            Comment: The component is currently installed but no longer selected
            Include Script: NECUniverge_Uninstall
          end
        end
         
        label: Install Panasonic TAPI
        if Variable DEBUGMODE Equals TRUE
          MessageBox: $TITLE$ Debug, Test Panasonic Install
        end
         
        Get Component Base\iCharge/iLink\Interface Connectors\Panasonic KX-TDA/TDE Selection State into Variable SELECTED
        if Variable SELECTED Equals TRUE
          if Variable INSTALLED_PANASONIC Equals 1
            Comment: Skip if already installed
            GoTo Label: Install Springer Miller
          end
          Set Variable PROGRESS to 0
          Set Variable PROGRESSTEXT to Panasonic TAPI Driver: Installing
          Include Script: Panasonic_Install
          Set Variable PROGRESS to 100
        else
          if Variable INSTALLED_PANASONIC Equals 1
            Comment: The component is currently installed but no longer selected
            Include Script: Panasonic_Uninstall
          end
        end
         
        label: Install Springer Miller
        if Variable DEBUGMODE Equals TRUE
          MessageBox: $TITLE$ Debug, Test SpringerMiller Install
        end
         
        Get Component Base\iCharge/iLink\Interface Connectors\PAR Springer-Miller Selection State into Variable SELECTED
        if Variable SELECTED Equals TRUE
          if Variable INSTALLED_SPRINGERMILLER Equals 1
            Comment: Skip if already installed
            GoTo Label: Install HotelMGR
          end
          Set Variable PROGRESS to 0
          Set Variable PROGRESSTEXT to Springer Miller: Installing
          Include Script: SpringerMiller_Install
          Set Variable PROGRESS to 100
        else
          if Variable INSTALLED_SPRINGERMILLER Equals 1
            Comment: The component is currently installed but no longer selected
            Include Script: SpringerMiller_Uninstall
          end
        end
         
        label: Install HotelMGR
        if Variable DEBUGMODE Equals TRUE
          MessageBox: $TITLE$ Debug, Test HotelMGR Install
        end
         
        Get Component Base\HotelMGR Selection State into Variable SELECTED
        if Variable SELECTED Equals TRUE
          if Variable INSTALLED_HOTELMGR Equals 1
            Comment: Skip if already installed
            GoTo Label: Install End
          end
          Set Variable PROGRESS to 0
          Set Variable PROGRESSTEXT to HotelMGR: Installing
          Include Script: HotelMGR_Install
          Set Variable PROGRESS to 100
        else
          if Variable INSTALLED_HOTELMGR Equals 1
            Comment: The component is currently installed but no longer selected
            Include Script: HotelMGR_Uninstall
          end
        end
         
        label: Install End
        if Variable DEBUGMODE Equals TRUE
          MessageBox: $TITLE$ Debug, Completed Testing Install Section
        end
         
        Comment: Delete temporary files
        Call DLL Function kernel32.dll->DeleteFileA (get result into variable PLUGINRESULT)
      end
    end
  end
  [compiler end]
  Set Variable PROGRESS to 100
end
[END REGION]
[END REGION]
 
[DEFINE REGION: Finish Setup]
Comment: End of Installation
if Variable REMOVE Equals FALSE
  Comment: Copy the installer to the Program Data folder on initial install and upgrades
  Set Variable EXEDEST to 
  Set Variable EXEDESTPATH to 
  Set Variable EXEDESTFILE to 
  Read Registry Key HKLM\SOFTWARE\Microsoft\Windows\CurrentVersion\Uninstall\TigerTMS iCharge\ModifyPath into EXEDEST
  Parse String $EXEDEST$ into Variables EXEDESTPATH and EXEDESTFILE (Split at last occurrence of pattern)
  Delete Files $EXEDESTPATH$\$EXEDESTFILE$ (when installing)
  Copy Local Files $SFXPATH$\$SFXFILE$ to $EXEDESTPATH$\$EXEDESTFILE$
end
Set Variable REBOOTCOMPUTER to TRUE
Hide Dialog
Display Dialog: finish, wait for dialog to return (modal)
if Variable SILENT Equals FALSE
  if Variable REBOOTCOMPUTER Equals TRUE
    Reboot Computer
  end
  if Variable RUNAPP Equals TRUE
    if Variable REMOVE Equals FALSE
      if Variable SUCCESS Equals COMPLETE
        Comment: Run programs here
      end
    end
  end
end
[END REGION]
 
